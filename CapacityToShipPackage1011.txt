class Solution {
    public int shipWithinDays(int[] weights, int days) {
        
        int n = weights.length;
        int max = weights[0];
        int total = 0;

        for(int weight: weights)
        {
            total += weight;
            max = Math.max(max, weight);
        }

        int start = max;
        int end = total;

        int res = total;

        while(start < end)
        {
            int mid = start+(end-start)/2;

            boolean isTrue = isPossible(weights, n, mid, days);

            if(isTrue)
            {
                res = Math.min(res, mid);
                end = mid;
            }
            else
            {
                start = mid+1;
            }
        }

        // return res;

        return end;
    }

    public boolean isPossible(int[] weights, int n, int cap, int maxDays)
    {
        int days = 0;
        int w = 0;
        for(int i = 0; i < n; i++)
        {
            w += weights[i];
            if(w > cap)
            {
                w = weights[i];
                days++;
            }
        }
        days++;

        return (days<=maxDays)?true:false;
    }

}