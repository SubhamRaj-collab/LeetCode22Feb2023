class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        
        int n = piles.length;

        int max = 0;
        for(int item: piles)
        {
            max = Math.max(max, item);
        }

        int start = 1;
        int end = max;

        while(start < end)
        {
            int mid = start+(end-start)/2;

            boolean ans = isPossible(piles, n, h, mid);

            if(ans)
            {
                end = mid;
            }
            else 
            {
                start = mid+1;
            }
        }
        return end;

    }

    public boolean isPossible(int[] piles, int n, int h, int num)
    {
        int hours = 0;

        for(int i = 0; i < n; i++)
        {
            int div = piles[i]/num;
            int rem = piles[i]%num;
            
            if(rem != 0)
            {
                div += 1;
            }
            hours += div;
        }

        return (hours <= h)?true:false;
    }

}